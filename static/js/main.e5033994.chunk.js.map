{"version":3,"sources":["Card.js","GuessCount.js","HallOfFame.js","HighScoreInput.js","App.js","serviceWorker.js","index.js"],"names":["Card","_ref","card","feedback","index","onClick","react_default","a","createElement","className","concat","GuessCount","guesses","HallOfFame","entries","map","_ref2","date","id","player","key","HOF_KEY","HOF_MAX_SIZE","HighScoreInput","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","persistWinner","event","preventDefault","entry","onStored","Date","toLocaleDateString","now","JSON","parse","localStorage","getItem","insertionPoint","findIndex","_ref3","push","splice","length","setItem","stringify","saveHOFEntry","state","winner","onSubmit","type","autoComplete","onChange","handleWinnerUpdate","value","Component","App","displayHallOfFame","hallOfFame","setState","handleCardClick","currentPair","handleNewPairClosedBy","cards","generateCards","matchedCardIndices","result","candidates","shuffle","SIDE","pop","_this$state","indexMatched","includes","_this2","_this$state2","newPair","newGuesses","matched","toConsumableArray","setTimeout","_this3","_this$state3","won","src_GuessCount_0","src_Card_0","getFeedbackForCard","src_HallOfFame_0","src_HighScoreInput_0","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.e5033994.chunk.js","sourcesContent":["import React from 'react'\nimport PropTypes from 'prop-types'\nimport './Card.css'\n\nconst HIDDEN_SYMBOL = '❓'\n\nconst Card = ({ card, feedback, index, onClick }) => (\n    <div className={`card ${feedback}`} onClick={() => onClick(index)}>\n        <span className=\"symbol\">\n            { feedback === 'hidden' ? HIDDEN_SYMBOL : card }\n        </span>\n    </div>\n)\n\nCard.propTypes = {\n    card: PropTypes.string.isRequired,\n    feedback: PropTypes.oneOf([\n        'visible',\n        'hidden',\n        'justMatched',\n        'justMismatched'\n    ]).isRequired,\n    index: PropTypes.number.isRequired,\n    onClick: PropTypes.func.isRequired,\n}\n\nexport default Card","import React from 'react'\nimport PropTypes from 'prop-types'\nimport './GuessCount.css'\n\nconst GuessCount = ({ guesses }) => <div className=\"guesses\">{ guesses }</div>\n\nGuessCount.propTypes = {\n    guesses: PropTypes.number.isRequired,\n}\n\nexport default GuessCount","import React from 'react'\nimport PropTypes from 'prop-types'\nimport './HallOfFame.css'\n\nconst HallOfFame = ({ entries }) => (\n  <table className=\"hallOfFame\">\n    <tbody>\n      {entries.map(({ date, guesses, id, player }) => (\n        <tr key={id}>\n          <td className=\"date\">{date}</td>\n          <td className=\"guesses\">{guesses}</td>\n          <td className=\"player\">{player}</td>\n        </tr>\n      ))}\n    </tbody>\n  </table>\n)\n\nHallOfFame.propTypes = {\n  entries: PropTypes.arrayOf(\n    PropTypes.shape({\n      date: PropTypes.string.isRequired,\n      guesses: PropTypes.number.isRequired,\n      id: PropTypes.number.isRequired,\n      player: PropTypes.string.isRequired,\n    })\n  ).isRequired,\n}\n\nexport default HallOfFame\n\n// == Internal helpers ==============================================\n\nexport const FAKE_HOF = [\n  { id: 3, guesses: 18, date: '01/07/2019', player: 'Tiago' },\n  { id: 2, guesses: 23, date: '02/07/2019', player: 'Alessa' },\n  { id: 1, guesses: 31, date: '30/06/2019', player: 'Marie' },\n  { id: 0, guesses: 48, date: '15/06/2019', player: 'Marc' },\n]\n\nconst HOF_KEY = '::Memory::HallofFame'\nconst HOF_MAX_SIZE = 10\n\nexport function saveHOFEntry(entry, onStored) {\n  entry.date = new Date().toLocaleDateString()\n  entry.id = Date.now()\n\n  const entries = JSON.parse(localStorage.getItem(HOF_KEY) || '[]')\n  const insertionPoint = entries.findIndex(\n    ({ guesses }) => guesses >= entry.guesses\n  )\n\n  if (insertionPoint === -1) {\n    entries.push(entry)\n  } else {\n    entries.splice(insertionPoint, 0, entry)\n  }\n  if (entries.length > HOF_MAX_SIZE) {\n    entries.splice(HOF_MAX_SIZE, entries.length)\n  }\n\n  localStorage.setItem(HOF_KEY, JSON.stringify(entries))\n  onStored(entries)\n}","import PropTypes from 'prop-types'\nimport React, { Component } from 'react'\nimport { saveHOFEntry } from './HallOfFame'\nimport './HighScoreInput.css'\n\nclass HighScoreInput extends Component {\n  constructor(props) {\n    super(props)\n    this.state = { winner: '' }\n  }\n\n  persistWinner = (event) => {\n    event.preventDefault()\n    const newEntry = { guesses: this.props.guesses, player: this.state.winner }\n    saveHOFEntry(newEntry, this.props.onStored)\n  }\n\n  render() {\n    return (\n      <form className=\"highScoreInput\" onSubmit={this.persistWinner}>\n        <p>\n          <label>\n            Congratulations ! Please enter your name :\n            <input\n              type=\"text\"\n              autoComplete=\"given-name\"\n              onChange={this.handleWinnerUpdate}\n              value={this.state.winner}\n            />\n          </label>\n          <button type=\"submit\">You won !</button>\n        </p>\n      </form>\n    )\n  }\n}\n\nHighScoreInput.propTypes = {\n  guesses: PropTypes.number.isRequired,\n  onStored: PropTypes.func.isRequired\n}\n\nexport default HighScoreInput","import React, { Component } from 'react'\nimport shuffle from 'lodash.shuffle'\nimport './App.css'\nimport Card from './Card'\nimport GuessCount from './GuessCount'\nimport HallOfFame from './HallOfFame'\nimport HighScoreInput from './HighScoreInput'\n\nconst SIDE = 6\nconst SYMBOLS = '😀🎉💖🎩🐶🐱🦄🐬🌍🌛🌞💫🍎🍌🍓🍐🍟🍿'\nconst VISUAL_PAUSE_MSECS = 750\n\nclass App extends Component {\n  constructor(props){\n    super(props)\n    this.state = {\n      cards: this.generateCards(),\n      currentPair: [],\n      guesses: 0,\n      hallOfFame: null,\n      matchedCardIndices: [],\n    }\n  }\n  \n  displayHallOfFame = hallOfFame => {\n    this.setState({ hallOfFame })\n  }\n\n  generateCards() {\n    const result = []\n    const size = SIDE * SIDE\n    const candidates = shuffle(SYMBOLS)\n    while (result.length < size) {\n      const card = candidates.pop()\n      result.push(card, card)\n    }\n    return shuffle(result)\n  }\n\n  getFeedbackForCard(index) {\n    const { currentPair, matchedCardIndices } = this.state\n    const indexMatched = matchedCardIndices.includes(index)\n\n    if (currentPair.length < 2) {\n      return indexMatched || index === currentPair[0] ? 'visible' : 'hidden'\n    }\n\n    if (currentPair.includes(index)) {\n      return indexMatched ? 'justMatched' : 'justMismatched'\n    }\n\n    return indexMatched ? 'visible' : 'hidden'\n  }\n\n  handleCardClick = index => {\n    const { currentPair } = this.state\n\n    if (currentPair.length === 2) {\n      return\n    }\n\n    if (currentPair.length === 0) {\n      this.setState({ currentPair: [index] })\n      return\n    }\n\n    this.handleNewPairClosedBy(index)\n  }\n\n  handleNewPairClosedBy(index) {\n    const { cards, currentPair, guesses, matchedCardIndices } = this.state\n\n    const newPair = [currentPair[0], index]\n    const newGuesses = guesses + 1\n    const matched = cards[newPair[0]] === cards[newPair[1]]\n    this.setState({ currentPair: newPair, guesses: newGuesses })\n    if (matched) {\n      this.setState({ matchedCardIndices: [...matchedCardIndices, ...newPair] })\n    }\n    setTimeout(() => this.setState({ currentPair: [] }), VISUAL_PAUSE_MSECS)\n  }\n\n  render() {\n    const { cards, guesses, hallOfFame, matchedCardIndices } = this.state\n    \n    const won = matchedCardIndices.length === cards.length\n    return (\n      <div className=\"memory\">\n        <GuessCount guesses={guesses} />\n        {cards.map((card, index) => (\n          <Card\n            card={card}\n            feedback={this.getFeedbackForCard(index)}\n            index={index}\n            key={index}\n            onClick={this.handleCardClick}\n          />\n        ))}\n        {won &&\n          (hallOfFame ? (\n            <HallOfFame entries={hallOfFame} />\n          ) : (\n            <HighScoreInput\n              guesses={guesses}\n              onStored={this.displayHallOfFame}\n            />\n          ))}\n      </div>\n    )\n  }\n}\n\nexport default App","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}